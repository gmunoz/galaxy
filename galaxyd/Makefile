# Makefile.in generated by automake 1.9.6 from Makefile.am.
# galaxyd/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/galaxy
pkglibdir = $(libdir)/galaxy
pkgincludedir = $(includedir)/galaxy
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-redhat-linux-gnu
host_triplet = x86_64-redhat-linux-gnu
bin_PROGRAMS = galaxyd$(EXEEXT)
subdir = galaxyd
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/pc.m4 $(top_srcdir)/m4/pkg.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_galaxyd_OBJECTS = galaxyd-crawler_thread.$(OBJEXT) \
	galaxyd-event_queue.$(OBJEXT) galaxyd-galaxyd.$(OBJEXT) \
	galaxyd-ihandler_thread.$(OBJEXT) \
	galaxyd-inotify_utils.$(OBJEXT) \
	galaxyd-iwatch_thread.$(OBJEXT) galaxyd-list.$(OBJEXT) \
	galaxyd-notifier.$(OBJEXT) galaxyd-server_thread.$(OBJEXT) \
	galaxyd-signal_thread.$(OBJEXT) galaxyd-thread.$(OBJEXT) \
	galaxyd-watch.$(OBJEXT)
galaxyd_OBJECTS = $(am_galaxyd_OBJECTS)
galaxyd_DEPENDENCIES = $(top_builddir)/liberror/src/liberror.la \
	$(top_builddir)/libgalaxy/libgalaxy.la
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(galaxyd_SOURCES)
DIST_SOURCES = $(galaxyd_SOURCES)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/gabriel/code/galaxy/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/gabriel/code/galaxy/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/gabriel/code/galaxy/missing --run autoconf
AUTOHEADER = ${SHELL} /home/gabriel/code/galaxy/missing --run autoheader
AUTOMAKE = ${SHELL} /home/gabriel/code/galaxy/missing --run automake-1.9
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = f95
FFLAGS = -g -O2
GLIB_CFLAGS = -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include  
GLIB_LIBS = -lglib-2.0  
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lglib-2.0 -lpthread -lpcre 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/gabriel/code/galaxy/missing --run makeinfo
OBJEXT = o
PACKAGE = galaxy
PACKAGE_BUGREPORT = munozga@gmail.com
PACKAGE_NAME = galaxy
PACKAGE_STRING = galaxy 0.0.1
PACKAGE_TARNAME = galaxy
PACKAGE_VERSION = 0.0.1
PATH_SEPARATOR = :
PC_REQUIRES = glib-2.0 >= 2.0.0
PKG_CONFIG = /usr/bin/pkg-config
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 0.0.1
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = f95
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-redhat-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = redhat
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = x86_64-redhat-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = redhat
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/gabriel/code/galaxy/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
subdirs =  liberror
sysconfdir = ${prefix}/etc
target_alias = 
MAINTAINERCLEANFILES = Makefile.in
INCLUDES = -I$(top_builddir) -I$(top_srcdir) -I$(top_srcdir)/liberror/src -I$(top_srcdir)/libgalaxy -I$(top_srcdir)/inotify
noinst_HEADERS = crawler_thread.h event_queue.h ihandler_thread.h inotify_utils.h iwatch_thread.h list.h notifier.h server_thread.h signal_thread.h thread.h watch.h
galaxyd_LDADD = $(top_builddir)/liberror/src/liberror.la $(top_builddir)/libgalaxy/libgalaxy.la -lglib-2.0  
galaxyd_CFLAGS = -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include  
galaxyd_SOURCES = crawler_thread.c event_queue.c galaxyd.c ihandler_thread.c inotify_utils.c iwatch_thread.c list.c notifier.c server_thread.c signal_thread.c thread.c watch.c
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  galaxyd/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  galaxyd/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
galaxyd$(EXEEXT): $(galaxyd_OBJECTS) $(galaxyd_DEPENDENCIES) 
	@rm -f galaxyd$(EXEEXT)
	$(LINK) $(galaxyd_LDFLAGS) $(galaxyd_OBJECTS) $(galaxyd_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/galaxyd-crawler_thread.Po
include ./$(DEPDIR)/galaxyd-event_queue.Po
include ./$(DEPDIR)/galaxyd-galaxyd.Po
include ./$(DEPDIR)/galaxyd-ihandler_thread.Po
include ./$(DEPDIR)/galaxyd-inotify_utils.Po
include ./$(DEPDIR)/galaxyd-iwatch_thread.Po
include ./$(DEPDIR)/galaxyd-list.Po
include ./$(DEPDIR)/galaxyd-notifier.Po
include ./$(DEPDIR)/galaxyd-server_thread.Po
include ./$(DEPDIR)/galaxyd-signal_thread.Po
include ./$(DEPDIR)/galaxyd-thread.Po
include ./$(DEPDIR)/galaxyd-watch.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

galaxyd-crawler_thread.o: crawler_thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-crawler_thread.o -MD -MP -MF "$(DEPDIR)/galaxyd-crawler_thread.Tpo" -c -o galaxyd-crawler_thread.o `test -f 'crawler_thread.c' || echo '$(srcdir)/'`crawler_thread.c; \
	then mv -f "$(DEPDIR)/galaxyd-crawler_thread.Tpo" "$(DEPDIR)/galaxyd-crawler_thread.Po"; else rm -f "$(DEPDIR)/galaxyd-crawler_thread.Tpo"; exit 1; fi
#	source='crawler_thread.c' object='galaxyd-crawler_thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-crawler_thread.o `test -f 'crawler_thread.c' || echo '$(srcdir)/'`crawler_thread.c

galaxyd-crawler_thread.obj: crawler_thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-crawler_thread.obj -MD -MP -MF "$(DEPDIR)/galaxyd-crawler_thread.Tpo" -c -o galaxyd-crawler_thread.obj `if test -f 'crawler_thread.c'; then $(CYGPATH_W) 'crawler_thread.c'; else $(CYGPATH_W) '$(srcdir)/crawler_thread.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-crawler_thread.Tpo" "$(DEPDIR)/galaxyd-crawler_thread.Po"; else rm -f "$(DEPDIR)/galaxyd-crawler_thread.Tpo"; exit 1; fi
#	source='crawler_thread.c' object='galaxyd-crawler_thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-crawler_thread.obj `if test -f 'crawler_thread.c'; then $(CYGPATH_W) 'crawler_thread.c'; else $(CYGPATH_W) '$(srcdir)/crawler_thread.c'; fi`

galaxyd-event_queue.o: event_queue.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-event_queue.o -MD -MP -MF "$(DEPDIR)/galaxyd-event_queue.Tpo" -c -o galaxyd-event_queue.o `test -f 'event_queue.c' || echo '$(srcdir)/'`event_queue.c; \
	then mv -f "$(DEPDIR)/galaxyd-event_queue.Tpo" "$(DEPDIR)/galaxyd-event_queue.Po"; else rm -f "$(DEPDIR)/galaxyd-event_queue.Tpo"; exit 1; fi
#	source='event_queue.c' object='galaxyd-event_queue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-event_queue.o `test -f 'event_queue.c' || echo '$(srcdir)/'`event_queue.c

galaxyd-event_queue.obj: event_queue.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-event_queue.obj -MD -MP -MF "$(DEPDIR)/galaxyd-event_queue.Tpo" -c -o galaxyd-event_queue.obj `if test -f 'event_queue.c'; then $(CYGPATH_W) 'event_queue.c'; else $(CYGPATH_W) '$(srcdir)/event_queue.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-event_queue.Tpo" "$(DEPDIR)/galaxyd-event_queue.Po"; else rm -f "$(DEPDIR)/galaxyd-event_queue.Tpo"; exit 1; fi
#	source='event_queue.c' object='galaxyd-event_queue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-event_queue.obj `if test -f 'event_queue.c'; then $(CYGPATH_W) 'event_queue.c'; else $(CYGPATH_W) '$(srcdir)/event_queue.c'; fi`

galaxyd-galaxyd.o: galaxyd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-galaxyd.o -MD -MP -MF "$(DEPDIR)/galaxyd-galaxyd.Tpo" -c -o galaxyd-galaxyd.o `test -f 'galaxyd.c' || echo '$(srcdir)/'`galaxyd.c; \
	then mv -f "$(DEPDIR)/galaxyd-galaxyd.Tpo" "$(DEPDIR)/galaxyd-galaxyd.Po"; else rm -f "$(DEPDIR)/galaxyd-galaxyd.Tpo"; exit 1; fi
#	source='galaxyd.c' object='galaxyd-galaxyd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-galaxyd.o `test -f 'galaxyd.c' || echo '$(srcdir)/'`galaxyd.c

galaxyd-galaxyd.obj: galaxyd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-galaxyd.obj -MD -MP -MF "$(DEPDIR)/galaxyd-galaxyd.Tpo" -c -o galaxyd-galaxyd.obj `if test -f 'galaxyd.c'; then $(CYGPATH_W) 'galaxyd.c'; else $(CYGPATH_W) '$(srcdir)/galaxyd.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-galaxyd.Tpo" "$(DEPDIR)/galaxyd-galaxyd.Po"; else rm -f "$(DEPDIR)/galaxyd-galaxyd.Tpo"; exit 1; fi
#	source='galaxyd.c' object='galaxyd-galaxyd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-galaxyd.obj `if test -f 'galaxyd.c'; then $(CYGPATH_W) 'galaxyd.c'; else $(CYGPATH_W) '$(srcdir)/galaxyd.c'; fi`

galaxyd-ihandler_thread.o: ihandler_thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-ihandler_thread.o -MD -MP -MF "$(DEPDIR)/galaxyd-ihandler_thread.Tpo" -c -o galaxyd-ihandler_thread.o `test -f 'ihandler_thread.c' || echo '$(srcdir)/'`ihandler_thread.c; \
	then mv -f "$(DEPDIR)/galaxyd-ihandler_thread.Tpo" "$(DEPDIR)/galaxyd-ihandler_thread.Po"; else rm -f "$(DEPDIR)/galaxyd-ihandler_thread.Tpo"; exit 1; fi
#	source='ihandler_thread.c' object='galaxyd-ihandler_thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-ihandler_thread.o `test -f 'ihandler_thread.c' || echo '$(srcdir)/'`ihandler_thread.c

galaxyd-ihandler_thread.obj: ihandler_thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-ihandler_thread.obj -MD -MP -MF "$(DEPDIR)/galaxyd-ihandler_thread.Tpo" -c -o galaxyd-ihandler_thread.obj `if test -f 'ihandler_thread.c'; then $(CYGPATH_W) 'ihandler_thread.c'; else $(CYGPATH_W) '$(srcdir)/ihandler_thread.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-ihandler_thread.Tpo" "$(DEPDIR)/galaxyd-ihandler_thread.Po"; else rm -f "$(DEPDIR)/galaxyd-ihandler_thread.Tpo"; exit 1; fi
#	source='ihandler_thread.c' object='galaxyd-ihandler_thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-ihandler_thread.obj `if test -f 'ihandler_thread.c'; then $(CYGPATH_W) 'ihandler_thread.c'; else $(CYGPATH_W) '$(srcdir)/ihandler_thread.c'; fi`

galaxyd-inotify_utils.o: inotify_utils.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-inotify_utils.o -MD -MP -MF "$(DEPDIR)/galaxyd-inotify_utils.Tpo" -c -o galaxyd-inotify_utils.o `test -f 'inotify_utils.c' || echo '$(srcdir)/'`inotify_utils.c; \
	then mv -f "$(DEPDIR)/galaxyd-inotify_utils.Tpo" "$(DEPDIR)/galaxyd-inotify_utils.Po"; else rm -f "$(DEPDIR)/galaxyd-inotify_utils.Tpo"; exit 1; fi
#	source='inotify_utils.c' object='galaxyd-inotify_utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-inotify_utils.o `test -f 'inotify_utils.c' || echo '$(srcdir)/'`inotify_utils.c

galaxyd-inotify_utils.obj: inotify_utils.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-inotify_utils.obj -MD -MP -MF "$(DEPDIR)/galaxyd-inotify_utils.Tpo" -c -o galaxyd-inotify_utils.obj `if test -f 'inotify_utils.c'; then $(CYGPATH_W) 'inotify_utils.c'; else $(CYGPATH_W) '$(srcdir)/inotify_utils.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-inotify_utils.Tpo" "$(DEPDIR)/galaxyd-inotify_utils.Po"; else rm -f "$(DEPDIR)/galaxyd-inotify_utils.Tpo"; exit 1; fi
#	source='inotify_utils.c' object='galaxyd-inotify_utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-inotify_utils.obj `if test -f 'inotify_utils.c'; then $(CYGPATH_W) 'inotify_utils.c'; else $(CYGPATH_W) '$(srcdir)/inotify_utils.c'; fi`

galaxyd-iwatch_thread.o: iwatch_thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-iwatch_thread.o -MD -MP -MF "$(DEPDIR)/galaxyd-iwatch_thread.Tpo" -c -o galaxyd-iwatch_thread.o `test -f 'iwatch_thread.c' || echo '$(srcdir)/'`iwatch_thread.c; \
	then mv -f "$(DEPDIR)/galaxyd-iwatch_thread.Tpo" "$(DEPDIR)/galaxyd-iwatch_thread.Po"; else rm -f "$(DEPDIR)/galaxyd-iwatch_thread.Tpo"; exit 1; fi
#	source='iwatch_thread.c' object='galaxyd-iwatch_thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-iwatch_thread.o `test -f 'iwatch_thread.c' || echo '$(srcdir)/'`iwatch_thread.c

galaxyd-iwatch_thread.obj: iwatch_thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-iwatch_thread.obj -MD -MP -MF "$(DEPDIR)/galaxyd-iwatch_thread.Tpo" -c -o galaxyd-iwatch_thread.obj `if test -f 'iwatch_thread.c'; then $(CYGPATH_W) 'iwatch_thread.c'; else $(CYGPATH_W) '$(srcdir)/iwatch_thread.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-iwatch_thread.Tpo" "$(DEPDIR)/galaxyd-iwatch_thread.Po"; else rm -f "$(DEPDIR)/galaxyd-iwatch_thread.Tpo"; exit 1; fi
#	source='iwatch_thread.c' object='galaxyd-iwatch_thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-iwatch_thread.obj `if test -f 'iwatch_thread.c'; then $(CYGPATH_W) 'iwatch_thread.c'; else $(CYGPATH_W) '$(srcdir)/iwatch_thread.c'; fi`

galaxyd-list.o: list.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-list.o -MD -MP -MF "$(DEPDIR)/galaxyd-list.Tpo" -c -o galaxyd-list.o `test -f 'list.c' || echo '$(srcdir)/'`list.c; \
	then mv -f "$(DEPDIR)/galaxyd-list.Tpo" "$(DEPDIR)/galaxyd-list.Po"; else rm -f "$(DEPDIR)/galaxyd-list.Tpo"; exit 1; fi
#	source='list.c' object='galaxyd-list.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-list.o `test -f 'list.c' || echo '$(srcdir)/'`list.c

galaxyd-list.obj: list.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-list.obj -MD -MP -MF "$(DEPDIR)/galaxyd-list.Tpo" -c -o galaxyd-list.obj `if test -f 'list.c'; then $(CYGPATH_W) 'list.c'; else $(CYGPATH_W) '$(srcdir)/list.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-list.Tpo" "$(DEPDIR)/galaxyd-list.Po"; else rm -f "$(DEPDIR)/galaxyd-list.Tpo"; exit 1; fi
#	source='list.c' object='galaxyd-list.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-list.obj `if test -f 'list.c'; then $(CYGPATH_W) 'list.c'; else $(CYGPATH_W) '$(srcdir)/list.c'; fi`

galaxyd-notifier.o: notifier.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-notifier.o -MD -MP -MF "$(DEPDIR)/galaxyd-notifier.Tpo" -c -o galaxyd-notifier.o `test -f 'notifier.c' || echo '$(srcdir)/'`notifier.c; \
	then mv -f "$(DEPDIR)/galaxyd-notifier.Tpo" "$(DEPDIR)/galaxyd-notifier.Po"; else rm -f "$(DEPDIR)/galaxyd-notifier.Tpo"; exit 1; fi
#	source='notifier.c' object='galaxyd-notifier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-notifier.o `test -f 'notifier.c' || echo '$(srcdir)/'`notifier.c

galaxyd-notifier.obj: notifier.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-notifier.obj -MD -MP -MF "$(DEPDIR)/galaxyd-notifier.Tpo" -c -o galaxyd-notifier.obj `if test -f 'notifier.c'; then $(CYGPATH_W) 'notifier.c'; else $(CYGPATH_W) '$(srcdir)/notifier.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-notifier.Tpo" "$(DEPDIR)/galaxyd-notifier.Po"; else rm -f "$(DEPDIR)/galaxyd-notifier.Tpo"; exit 1; fi
#	source='notifier.c' object='galaxyd-notifier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-notifier.obj `if test -f 'notifier.c'; then $(CYGPATH_W) 'notifier.c'; else $(CYGPATH_W) '$(srcdir)/notifier.c'; fi`

galaxyd-server_thread.o: server_thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-server_thread.o -MD -MP -MF "$(DEPDIR)/galaxyd-server_thread.Tpo" -c -o galaxyd-server_thread.o `test -f 'server_thread.c' || echo '$(srcdir)/'`server_thread.c; \
	then mv -f "$(DEPDIR)/galaxyd-server_thread.Tpo" "$(DEPDIR)/galaxyd-server_thread.Po"; else rm -f "$(DEPDIR)/galaxyd-server_thread.Tpo"; exit 1; fi
#	source='server_thread.c' object='galaxyd-server_thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-server_thread.o `test -f 'server_thread.c' || echo '$(srcdir)/'`server_thread.c

galaxyd-server_thread.obj: server_thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-server_thread.obj -MD -MP -MF "$(DEPDIR)/galaxyd-server_thread.Tpo" -c -o galaxyd-server_thread.obj `if test -f 'server_thread.c'; then $(CYGPATH_W) 'server_thread.c'; else $(CYGPATH_W) '$(srcdir)/server_thread.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-server_thread.Tpo" "$(DEPDIR)/galaxyd-server_thread.Po"; else rm -f "$(DEPDIR)/galaxyd-server_thread.Tpo"; exit 1; fi
#	source='server_thread.c' object='galaxyd-server_thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-server_thread.obj `if test -f 'server_thread.c'; then $(CYGPATH_W) 'server_thread.c'; else $(CYGPATH_W) '$(srcdir)/server_thread.c'; fi`

galaxyd-signal_thread.o: signal_thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-signal_thread.o -MD -MP -MF "$(DEPDIR)/galaxyd-signal_thread.Tpo" -c -o galaxyd-signal_thread.o `test -f 'signal_thread.c' || echo '$(srcdir)/'`signal_thread.c; \
	then mv -f "$(DEPDIR)/galaxyd-signal_thread.Tpo" "$(DEPDIR)/galaxyd-signal_thread.Po"; else rm -f "$(DEPDIR)/galaxyd-signal_thread.Tpo"; exit 1; fi
#	source='signal_thread.c' object='galaxyd-signal_thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-signal_thread.o `test -f 'signal_thread.c' || echo '$(srcdir)/'`signal_thread.c

galaxyd-signal_thread.obj: signal_thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-signal_thread.obj -MD -MP -MF "$(DEPDIR)/galaxyd-signal_thread.Tpo" -c -o galaxyd-signal_thread.obj `if test -f 'signal_thread.c'; then $(CYGPATH_W) 'signal_thread.c'; else $(CYGPATH_W) '$(srcdir)/signal_thread.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-signal_thread.Tpo" "$(DEPDIR)/galaxyd-signal_thread.Po"; else rm -f "$(DEPDIR)/galaxyd-signal_thread.Tpo"; exit 1; fi
#	source='signal_thread.c' object='galaxyd-signal_thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-signal_thread.obj `if test -f 'signal_thread.c'; then $(CYGPATH_W) 'signal_thread.c'; else $(CYGPATH_W) '$(srcdir)/signal_thread.c'; fi`

galaxyd-thread.o: thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-thread.o -MD -MP -MF "$(DEPDIR)/galaxyd-thread.Tpo" -c -o galaxyd-thread.o `test -f 'thread.c' || echo '$(srcdir)/'`thread.c; \
	then mv -f "$(DEPDIR)/galaxyd-thread.Tpo" "$(DEPDIR)/galaxyd-thread.Po"; else rm -f "$(DEPDIR)/galaxyd-thread.Tpo"; exit 1; fi
#	source='thread.c' object='galaxyd-thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-thread.o `test -f 'thread.c' || echo '$(srcdir)/'`thread.c

galaxyd-thread.obj: thread.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-thread.obj -MD -MP -MF "$(DEPDIR)/galaxyd-thread.Tpo" -c -o galaxyd-thread.obj `if test -f 'thread.c'; then $(CYGPATH_W) 'thread.c'; else $(CYGPATH_W) '$(srcdir)/thread.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-thread.Tpo" "$(DEPDIR)/galaxyd-thread.Po"; else rm -f "$(DEPDIR)/galaxyd-thread.Tpo"; exit 1; fi
#	source='thread.c' object='galaxyd-thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-thread.obj `if test -f 'thread.c'; then $(CYGPATH_W) 'thread.c'; else $(CYGPATH_W) '$(srcdir)/thread.c'; fi`

galaxyd-watch.o: watch.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-watch.o -MD -MP -MF "$(DEPDIR)/galaxyd-watch.Tpo" -c -o galaxyd-watch.o `test -f 'watch.c' || echo '$(srcdir)/'`watch.c; \
	then mv -f "$(DEPDIR)/galaxyd-watch.Tpo" "$(DEPDIR)/galaxyd-watch.Po"; else rm -f "$(DEPDIR)/galaxyd-watch.Tpo"; exit 1; fi
#	source='watch.c' object='galaxyd-watch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-watch.o `test -f 'watch.c' || echo '$(srcdir)/'`watch.c

galaxyd-watch.obj: watch.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -MT galaxyd-watch.obj -MD -MP -MF "$(DEPDIR)/galaxyd-watch.Tpo" -c -o galaxyd-watch.obj `if test -f 'watch.c'; then $(CYGPATH_W) 'watch.c'; else $(CYGPATH_W) '$(srcdir)/watch.c'; fi`; \
	then mv -f "$(DEPDIR)/galaxyd-watch.Tpo" "$(DEPDIR)/galaxyd-watch.Po"; else rm -f "$(DEPDIR)/galaxyd-watch.Tpo"; exit 1; fi
#	source='watch.c' object='galaxyd-watch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(galaxyd_CFLAGS) $(CFLAGS) -c -o galaxyd-watch.obj `if test -f 'watch.c'; then $(CYGPATH_W) 'watch.c'; else $(CYGPATH_W) '$(srcdir)/watch.c'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-binPROGRAMS uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
